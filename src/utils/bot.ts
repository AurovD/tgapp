import { Telegraf } from 'telegraf';
import UserModel from '../models/userSchema';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!BOT_TOKEN) {
    throw new Error('TELEGRAM_BOT_TOKEN is not defined');
}

const bot = new Telegraf(BOT_TOKEN);

bot.command('start', async (ctx) => {
    const user = ctx.from;

    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', user);



    try {
        const existingUser = await UserModel.findOne({ id: user.id });

        if (!existingUser) {
            const newUser = new UserModel({
                id: user.id,
                first_name: user.first_name,
                username: user.username,
            });

            await newUser.save();
            console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:', newUser);
        }
    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
        ctx.reply(
            `–°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–π—Ç–∏ —á—É—Ç—å –ø–æ–∑–∂–µ.`
        );
    }

    ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã\n–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`
    );
});

export { bot };
